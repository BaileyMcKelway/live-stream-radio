(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./src/api/frontendDevelopment.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"frontend-development"}},"Frontend Development"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Frontends for ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"live-stream-radio")," are very much appreciated, and should be seperated from the main Project CLI/API. Please open an issue on the Github repo if you would like your frontend mentioned on the project README or Documentation."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"tips-for-building-frontends"}},"Tips for Building Frontends"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Two types of frontends that could be built are Server Side Rendered Frontends, and Client Side Frontends. Either way, looking through the API endpoints is a great place to start."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"server-side-rendered-frontends"}},"Server Side Rendered Frontends"),o.a.createElement(r.MDXTag,{name:"p",components:n},"An ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"example")," of a possible server side rendered frontend is an application that is build in ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/expressjs/express"}},"Express"),". Authentication using the API key in the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"config.json")," could be passed through an environment variable or flag for the application. Then a more secure/proper authentication could be handled by your application. Express could then act as the proxy between the stream API, and the user, and render views as static pages, or in a Javascript framework like ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://reactjs.org/"}},"React"),"."),o.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"client-side-frontends"}},"Client Side Frontends"),o.a.createElement(r.MDXTag,{name:"p",components:n},"An ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"example")," of a possible client side frontend is an application written using ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://preactjs.com/"}},"Preact")," or ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://angular.io/"}},"Angular"),'. The API key for authentication could be prompted by the user on "login", and then stored in localstorage to act as the authentication token. This would require exposing the API publicly, and honestly, isn\'t very secure. Thus I would suggest putting the client behind something at least slightly more secure like basic auth. After the API Key is stored, then it could be used to access the API endpoints by the user.'))}}}]);